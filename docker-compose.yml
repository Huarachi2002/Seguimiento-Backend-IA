# ========================================
# Docker Compose para WhatsApp AI Assistant
# ========================================
# Stack: FastAPI + Redis
# Optimizado para desarrollo y producción

version: '3.8'

services:
  # ===== Servicio principal: FastAPI Backend con IA =====
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp-ai-api
    ports:
      - "${PORT:-8000}:8000"
    environment:
      # Configuración de la aplicación
      - APP_NAME=WhatsApp AI Assistant
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # Configuración de Redis (usar nombre del servicio como host)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_DECODE_RESPONSES=true
      - CONVERSATION_TTL=3600
      
      # Configuración del modelo de IA
      - MODEL_NAME=/app/training/models/gpt2-spanish-tb-structured
      - DEVICE=cpu
      - MODEL_CACHE_DIR=/app/models
      - MAX_LENGTH=150
      - TEMPERATURE=0.7
      
      # Configuración del backend de seguimiento
      - SEGUIMIENTO_SERVICE_URL=http://host.docker.internal:3001
      - SEGUIMIENTO_TIMEOUT=10
      
      # Centro médico
      - MEDICAL_CENTER_NAME=CAÑADA DEL CARMEN
    env_file:
      - .env  # Sobrescribe con variables de .env si existe
    volumes:
      # Persistir logs
      - ./logs:/app/logs
      # Persistir cache de modelos (evita redescargar)
      - ./app/training/models:/app/training/models:ro
      - model-cache:/app/models
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - whatsapp-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # 1 minuto para descargar modelo en primer inicio
    # Límites de recursos (ajustar según tu servidor)
    deploy:
      resources:
        limits:
          cpus: '2'      # Máximo 2 CPUs
          memory: 4G     # Máximo 4GB RAM
        reservations:
          cpus: '1'      # Mínimo 1 CPU
          memory: 2G     # Mínimo 2GB RAM

  # ===== Cache y Estado: Redis =====
  redis:
    image: redis:7-alpine
    container_name: whatsapp-ai-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"  # Exponer para debug (remover en producción)
    restart: unless-stopped
    networks:
      - whatsapp-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Límites de recursos para Redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# ===== Volumes =====
volumes:
  redis-data:
    driver: local
    name: whatsapp-ai-redis-data
  model-cache:
    driver: local
    name: whatsapp-ai-model-cache

# ===== Networks =====
networks:
  whatsapp-ai-network:
    driver: bridge
    name: whatsapp-ai-network
